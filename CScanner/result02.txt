Result: 
TOKEN: INT                 int
TOKEN: MAIN                main
TOKEN: LPAR                (
TOKEN: INT                 int
TOKEN: ID                  a
TOKEN: COMMA               ,
TOKEN: INT                 int
TOKEN: ID                  b
TOKEN: COMMA               ,
TOKEN: INT                 int
TOKEN: ID                  c
TOKEN: COMMA               ,
TOKEN: INT                 int
TOKEN: ID                  d
TOKEN: RPAR                )
TOKEN: LBRACE              {
TOKEN: INT                 int
TOKEN: ID                  inta
TOKEN: SEMI                ;
TOKEN: ID                  inta
TOKEN: ASSIGN              =
TOKEN: LPAR                (
TOKEN: ID                  a
TOKEN: PLUS                +
TOKEN: ID                  b
TOKEN: RPAR                )
TOKEN: DIV_OP              /
TOKEN: ID                  c
TOKEN: MUL_OP              *
TOKEN: ID                  d
TOKEN: SEMI                ;
TOKEN: INT                 int
TOKEN: ID                  input
TOKEN: ASSIGN              =
TOKEN: READ                scanf
TOKEN: LPAR                (
TOKEN: RPAR                )
TOKEN: SEMI                ;
TOKEN: IF                  if
TOKEN: LPAR                (
TOKEN: ID                  inta
TOKEN: EQ                  ==
TOKEN: INT_NUM             233
TOKEN: OROR                ||
TOKEN: ID                  inta
TOKEN: GTEQ                <=
TOKEN: INT_NUM             233
TOKEN: RPAR                )
TOKEN: LBRACE              {
TOKEN: WRITE               printf
TOKEN: LPAR                (
TOKEN: ID                  inta
TOKEN: RPAR                )
TOKEN: SEMI                ;
TOKEN: RBRACE              }
TOKEN: ELSE                else
TOKEN: LBRACE              {
TOKEN: DO                  do
TOKEN: LBRACE              {
TOKEN: ID                  inta
TOKEN: PLUS                +
TOKEN: ASSIGN              =
TOKEN: INT_NUM             1
TOKEN: SEMI                ;
TOKEN: RBRACE              }
TOKEN: WHILE               while
TOKEN: LPAR                (
TOKEN: ID                  inta
TOKEN: NOTEQ               !=
TOKEN: INT_NUM             233
TOKEN: RPAR                )
TOKEN: SEMI                ;
TOKEN: RBRACE              }
TOKEN: RBRACE              }
TOKEN: RETURN              return
TOKEN: LPAR                (
TOKEN: INT_NUM             -2
TOKEN: PLUS                +
TOKEN: INT_NUM             3
TOKEN: RPAR                )
TOKEN: SEMI                ;
TOKEN: RBRACE              }
