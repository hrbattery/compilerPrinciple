Result: 
TOKEN: ID                  intmain
TOKEN: INT                 int
TOKEN: MAIN                main
TOKEN: VOID                void
TOKEN: BREAK               break
TOKEN: DO                  do
TOKEN: ELSE                else
TOKEN: IF                  if
TOKEN: WHILE               while
TOKEN: RETURN              return
TOKEN: READ                scanf
TOKEN: WRITE               printf
TOKEN: AND_OP              &
TOKEN: OR_OP               |
TOKEN: ANDAND              &&
TOKEN: OROR                ||
TOKEN: LTEQ                <=
TOKEN: GTEQ                <=
TOKEN: EQ                  ==
TOKEN: LT                  <
TOKEN: GT                  >
TOKEN: NOTEQ               !=
TOKEN: ASSIGN              =
TOKEN: LPAR                (
TOKEN: RPAR                )
TOKEN: LBRACE              {
TOKEN: RBRACE              }
TOKEN: POINT               .
TOKEN: COMMA               ,
TOKEN: PLUS                +
TOKEN: MINUS               -
TOKEN: MUL_OP              *
TOKEN: DIV_OP              /
TOKEN: LSQUARE             [
TOKEN: RSQUARE             ]
TOKEN: NOT_OP              !
TOKEN: SHR_OP              >>
TOKEN: SHL_OP              <<
TOKEN: INT_NUM             123
TOKEN: PLUS                +
TOKEN: INT_NUM             123
TOKEN: MINUS               -
TOKEN: INT_NUM             123
TOKEN: MINUS               -
TOKEN: INT_NUM             23
TOKEN: PLUS                +
TOKEN: INT_NUM             123
TOKEN: MINUS               -
TOKEN: INT_NUM             23
TOKEN: PLUS                +
TOKEN: INT_NUM             123
TOKEN: ID                  a
TOKEN: PLUS                +
TOKEN: ID                  b
TOKEN: PLUS                +
TOKEN: ID                  c
TOKEN: ID                  qweqw1
TOKEN: ID                  fkoe1
TOKEN: ID                  ffw_
TOKEN: ID                  FWEFG
TOKEN: ID                  FWEfi123JIFnfa_dsggwt
TOKEN: INT                 int
TOKEN: ID                  a
TOKEN: COMMA               ,
TOKEN: ID                  b
TOKEN: COMMA               ,
TOKEN: ID                  c
TOKEN: SEMI                ;
TOKEN: ID                  a
TOKEN: ASSIGN              =
TOKEN: INT_NUM             -1
TOKEN: SEMI                ;
TOKEN: ID                  b
TOKEN: ASSIGN              =
TOKEN: INT_NUM             +2
TOKEN: SEMI                ;
TOKEN: ID                  c
TOKEN: ASSIGN              =
TOKEN: INT_NUM             3
TOKEN: SEMI                ;
TOKEN: ID                  a
TOKEN: ASSIGN              =
TOKEN: ID                  a
TOKEN: PLUS                +
TOKEN: INT_NUM             1
TOKEN: SEMI                ;
TOKEN: INT                 int
TOKEN: ID                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
TOKEN: SEMI                ;
TOKEN: ID                  a
TOKEN: SHL_OP              <<
TOKEN: INT_NUM             1
TOKEN: SEMI                ;
TOKEN: ID                  b
TOKEN: SHR_OP              >>
TOKEN: INT_NUM             1
TOKEN: SEMI                ;
TOKEN: IF                  if
TOKEN: LPAR                (
TOKEN: NOT_OP              !
TOKEN: ID                  b
TOKEN: RPAR                )
TOKEN: LBRACE              {
TOKEN: RBRACE              }
TOKEN: ELSE                else
TOKEN: LBRACE              {
TOKEN: DO                  do
TOKEN: LBRACE              {
TOKEN: ID                  a
TOKEN: ASSIGN              =
TOKEN: ID                  a
TOKEN: PLUS                +
TOKEN: INT_NUM             1
TOKEN: RBRACE              }
TOKEN: WHILE               while
TOKEN: LPAR                (
TOKEN: INT_NUM             1
TOKEN: RPAR                )
TOKEN: LBRACE              {
TOKEN: RBRACE              }
TOKEN: RBRACE              }
